#include <iostream>
#include <vector>
#include <vector>
#include <queue>
#include <unordered_set>
#include <unordered_map>

using namespace std;

bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
    if (source == destination) return true;

    unordered_map<int, vector<int>> graph;
    for (const auto& edge : edges) {
        graph[edge[0]].push_back(edge[1]);
        graph[edge[1]].push_back(edge[0]);
    }

    queue<int> q;
    unordered_set<int> visited;
    q.push(source);

    while (!q.empty()) {
        int node = q.front();
        q.pop();

        if (node == destination) return true;

        if (visited.find(node) == visited.end()) {
            visited.insert(node);
            for (int neighbor : graph[node]) {
                if (visited.find(neighbor) == visited.end()) {
                    q.push(neighbor);
                }
            }
        }
    }

    return false;
}


int main() {
    int n1 = 3;
    vector<vector<int>> edges1 = {{0, 1}, {1, 2}, {2, 0}};
    int source1 = 0, destination1 = 2;

    cout << (validPath(n1, edges1, source1, destination1) ? "True" : "False") << endl;

    int n2 = 6;
    vector<vector<int>> edges2 = {{0, 1}, {0, 2}, {3, 5}, {5, 4}, {4, 3}};
    int source2 = 0, destination2 = 5;

    cout << (validPath(n2, edges2, source2, destination2) ? "True" : "False") << endl;

    return 0;
}
