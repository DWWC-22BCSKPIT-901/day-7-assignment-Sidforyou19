#include <vector>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
using namespace std;

class UnionFind {
private:
    vector<int> parent, rank;

public:
    UnionFind(int n) {
        parent.resize(n);
        rank.resize(n, 0);
        for (int i = 0; i < n; ++i) {
            parent[i] = i;
        }
    }

    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]); // Path compression
        }
        return parent[x];
    }

    void unite(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        if (rootX != rootY) {
            if (rank[rootX] > rank[rootY]) {
                parent[rootY] = rootX;
            } else if (rank[rootX] < rank[rootY]) {
                parent[rootX] = rootY;
            } else {
                parent[rootY] = rootX;
                rank[rootX]++;
            }
        }
    }
};

vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
    int n = accounts.size();
    UnionFind uf(n);

    // Map email to account index
    unordered_map<string, int> emailToIndex;
    for (int i = 0; i < n; ++i) {
        for (int j = 1; j < accounts[i].size(); ++j) {
            const string& email = accounts[i][j];
            if (emailToIndex.count(email)) {
                uf.unite(i, emailToIndex[email]);
            } else {
                emailToIndex[email] = i;
            }
        }
    }

    // Group emails by root parent
    unordered_map<int, unordered_set<string>> groups;
    for (const auto& [email, index] : emailToIndex) {
        int root = uf.find(index);
        groups[root].insert(email);
    }

    // Prepare the result
    vector<vector<string>> result;
    for (const auto& [root, emails] : groups) {
        vector<string> mergedAccount(emails.begin(), emails.end());
        sort(mergedAccount.begin(), mergedAccount.end());
        mergedAccount.insert(mergedAccount.begin(), accounts[root][0]); // Add the name
        result.push_back(mergedAccount);
    }

    return result;
}

int main() {
    // Example 1
    vector<vector<string>> accounts1 = {
        {"John", "johnsmith@mail.com", "john_newyork@mail.com"},
        {"John", "johnsmith@mail.com", "john00@mail.com"},
        {"Mary", "mary@mail.com"},
        {"John", "johnnybravo@mail.com"}
    };
    vector<vector<string>> result1 = accountsMerge(accounts1);
    for (const auto& account : result1) {
        for (const auto& str : account) {
            printf("%s ", str.c_str());
        }
        printf("\n");
    }

    // Example 2
    vector<vector<string>> accounts2 = {
        {"Gabe", "Gabe0@m.co", "Gabe3@m.co", "Gabe1@m.co"},
        {"Kevin", "Kevin3@m.co", "Kevin5@m.co", "Kevin0@m.co"},
        {"Ethan", "Ethan5@m.co", "Ethan4@m.co", "Ethan0@m.co"},
        {"Hanzo", "Hanzo3@m.co", "Hanzo1@m.co", "Hanzo0@m.co"},
        {"Fern", "Fern5@m.co", "Fern1@m.co", "Fern0@m.co"}
    };
    vector<vector<string>> result2 = accountsMerge(accounts2);
    for (const auto& account : result2) {
        for (const auto& str : account) {
            printf("%s ", str.c_str());
        }
        printf("\n");
    }

    return 0;
}
